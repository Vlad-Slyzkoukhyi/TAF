parameters:
  - name: browser
    displayName: 'Browser for UI tests'
    type: string
    default: 'chrome'
    values:
    - chrome
    - firefox
    - edge

trigger:
  branches:
    include:
      - main

pr:
  branches:
    include:
      - main

schedules:
  - cron: "0 21 * * *"
    displayName: "Nightly build"
    branches:
      include:
        - main
    always: true

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Debug'

jobs:
  - job: APITests
    displayName: 'Execute API Tests'
    steps:
    
      - task: UseDotNet@2
        inputs:
          version: '8.0.x'
          packageType: 'sdk'
      
      - task: UseDotNet@2
        inputs:
          version: '8.0.x'
          packageType: 'runtime'

      - script: dotnet restore TAF_Task/TAF_Task_API/TAF_API/TAF_API.csproj
        displayName: 'Restore API Packages'

      - script: dotnet build TAF_Task/TAF_Task_API/TAF_API/TAF_API.csproj --configuration $(buildConfiguration)
        displayName: 'Build API Project'

      - script: dotnet test TAF_Task/TAF_Task_API/TAF_API/TAF_API.csproj --configuration $(buildConfiguration) --logger "trx;LogFileName=api_test_results.trx"
        displayName: 'Test API Project'

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: '**/api_test_results.trx'
        displayName: 'Publish API Test Results'

  - job: UITests
    displayName: 'Execute UI Tests'
    dependsOn: APITests
    condition: succeededOrFailed()
    steps:
      - task: UseDotNet@2
        inputs:
          version: '8.0.x'
          packageType: 'sdk'
      
      - task: UseDotNet@2
        inputs:
          version: '8.0.x'
          packageType: 'runtime'

      - script: dotnet restore TAF_Task/TAF_Task/TAF_Task.csproj
        displayName: 'Restore UI Packages'

      - script: dotnet build TAF_Task/TAF_Task/TAF_Task.csproj --configuration $(buildConfiguration)
        displayName: 'Build UI Project'

      - script: dotnet test TAF_Task/TAF_Task/TAF_Task.csproj --configuration $(buildConfiguration) --logger "trx;LogFileName=ui_test_results.trx"
        displayName: 'Test UI Project'
        env:
          UI_TEST: true
          BROWSER: ${{ parameters.browser }}
          SCREENSHOTS_PATH: $(Build.ArtifactStagingDirectory)/Screenshots

      - task: PublishTestResults@2
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: '**/ui_test_results.trx'
        displayName: 'Publish UI Test Results'

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: '$(System.DefaultWorkingDirectory)/Screenshots'
          ArtifactName: 'UITestScreenshots'
          publishLocation: 'container'
        condition: succeededOrFailed()
        displayName: 'Publish Screenshots as Artifacts'

      - script: mkdir -p "$(System.DefaultWorkingDirectory)/Screenshots"
        displayName: 'Create Screenshots Directory'

      - upload: '**/Screenshots'
        condition: succeeded()
        displayName: 'Upload Screenshots'
        artifact: Screenshots